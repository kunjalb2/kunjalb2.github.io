{"version":3,"sources":["components/TopNavbar.js","components/SignUp.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["TopNavbar","react_default","a","createElement","className","Link","to","Component","SignUp","Login","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","defineProperty","target","id","value","handleSubmit","_this$state","state","email","password","preventDefault","validation_message","_this$state2","onSubmit","htmlFor","onChange","type","placeholder","name","App","BrowserRouter","TopNavbar_TopNavbar","Route","exact","path","render","Fragment","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ab49d76.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class TopNavbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-inverse\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"navbar-header\">\r\n                        <Link to=\"/\" className=\"navbar-brand\"> <span className=\"glyphicon glyphicon-user\"></span> Kunjal Bhavsar </Link>\r\n                    </div>\r\n                    <ul className=\"nav navbar-nav navbar-right\">\r\n                        <li><Link to=\"/sign-up\"> <span className=\"glyphicon glyphicon-user\"></span> Sign Up </Link></li>\r\n                        <li><Link to=\"/login\"> <span className=\"glyphicon glyphicon-log-in\"></span> Login </Link></li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class SignUp extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Signup Form\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Login extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: \"\",\r\n            password: \"\",\r\n            validation_message: \"\"\r\n        };\r\n    }\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            [event.target.id]: event.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n        const { email, password } = this.state;\r\n        event.preventDefault();\r\n        if (email === '' || password === '') {\r\n            this.setState({\r\n                'validation_message': 'Login Fields are missing'\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { email, validation_message } = this.state;\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h2>Kunjal Login Form</h2>\r\n                {\r\n                    (validation_message !== '') && <div className=\"alert alert-danger\">\r\n                        <strong>Error!</strong> {validation_message}\r\n                    </div>\r\n                }\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"email\">Email:</label>\r\n                        <input onChange={this.handleChange} type=\"email\" className=\"form-control\" id=\"email\" placeholder=\"Enter email\" value={email} name=\"email\" />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"pwd\">Password:</label>\r\n                        <input onChange={this.handleChange} type=\"password\" className=\"form-control\" id=\"pwd\" placeholder=\"Enter password\" name=\"pwd\" />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-default\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport TopNavbar from './components/TopNavbar';\nimport SignUp from './components/SignUp';\nimport Login from './components/Login';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <TopNavbar />\n          <Route exact path=\"/\" render={props => (\n            <React.Fragment>\n              Home Page\n            </React.Fragment>\n          )} >\n          </Route>\n          <Route path=\"/sign-up\" component={SignUp} />\n          <Route path=\"/login\" component={Login} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}